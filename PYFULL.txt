PYTHON - CORE LINKS
*******************

https://www.youtube.com/watch?v=xtuHx_yZNNY&list=PLJOZbcDBbxotJAZI_z0SqHfyMgt0C1BNo&index=56&t=42157s&ab_channel=Software%26WebTechnology - Software and web technology
https://www.youtube.com/watch?v=Yp_tqu22zIU&ab_channel=TutorJoe%27sStanley																  - Tutorjoes Standley

Data structures and Algorithm - https://www.youtube.com/watch?v=can_5EOB7K8&ab_channel=CSinTamil										  - Cs in Tamil
Advance python(Like Multithreading) - https://www.youtube.com/watch?v=AtidUGKyHFo&list=PPSV&ab_channel=SANTRATECHSPOT					  - SantraTechSpot
TKinder library(Basics) - https://www.youtube.com/playlist?list=PLWbtDrDnmTHDkyMizWD577tHixGE0I2c4										  - CS in tamil
Django - https://www.youtube.com/playlist?list=PLJOZbcDBbxouW7ss0UscBPDqTIvSfXZ0q														  - Software and web technology
MySQL 1 - https://www.youtube.com/watch?v=cpbd7CLAqtw&t=2175s&ab_channel=TutorJoe%27sStanley											  - Tutorjoes Standley
MySQL 2 - https://www.youtube.com/watch?v=5l-ReopTq04&ab_channel=TutorJoe%27sStanley													  - Tutorjoes Standley

Data Analysis and Visualisation - https://www.youtube.com/playlist?list=PL18h92UN0f0bu-NzcVGeBLVGCGj9hnSha								  - Learn With Me

Interview Question(Data Structure and Algorithm) - https://www.youtube.com/watch?v=XbxXZXf3nUw&list=PPSV&ab_channel=Karthik%27sShow		  - Karthik show


																																		[series, a single part of column]
																																		[dataframe, a full table of content]

Some Projects : https://github.com/itsAvikrishna/MyFolder/blob/main/user.py
				https://github.com/itsAvikrishna/MyFolder/blob/main/users.json
				https://github.com/itsAvikrishna/MyFolder/blob/main/AdminSystem.py
				https://github.com/itsAvikrishna/MyFolder/blob/main/RPG.py

**************************************************************************************************************************************************************************************

DATA VISUALIZATION AND DATA ANALYTICS
*************************************

NUMPY BASICS:
************

what it means:
	- is a open source python library
	- which meant by numerical python shortly use np or any name 
	- used for numerical algebric or mathematical calculation and dynamic dimentional wayform of array 
	- written in partial of python and c & c++

**************************************************************************************************************************************************************************************

SECTION - 1

how to change normal list to numpy:
Syntax = list = [1,2,3,4,5,5,6,6]
		 arr = np.array(list)
		 
buit in functions and attributes

np.arange  						= used to make range functions
np.zeros and np.ones		    = to create dimentional array for zero and ones
np.zeros(i,j) and np.ones(i,j)  = which is used to create multidimentional array
np.linspace(i,j,k)				= i for intial to j for end range and k for create multiple space interval equally separated in between i and j
random functions:
np.random.rand(i)				= for uniform distribution between 0 and 1 for single dimentional array
np.random.rand(i,j)				= for uniform distribution between 0 and 1 for multidimentional array
np.shape 						= to know the shape of array distribution
np.eye()						= to create identity matrix like cross 1on middle between zeros

np.random.randn(i)				= for standard distribution between -1 and 1 for single dimentional array like bell curve
np.random.randn(i,j)			= for standard distribution between -1 and 1 for multidimentional array like bell curve

np.random.randint(i,j,k)		= for random distribution of numbers from i to j and k for number of numbers need

arr.reshape(i,j)				= used to reshape the shape of matrix or dimention of matrix 
arr.max()						= used for return maximum number of array
arr.min()						= used for return minimum number of array
arr.argmax()					= used for maximum index of array
arr.argmin()					= used for minimum index of array
arr.sum()						= to sum the total values
arr.sum(axis = 0 or 1)			= this axis used to sum row or columns										[note : axis 0 means columns and 1 means rows] in numpy
arr.std()						= to know the standard deviationn in multidimentional matrix
arr.dtype						= used to know the datatype 

end of section - 1.

**************************************************************************************************************************************************************************************

SECTION - 2 

indexing and slicing:

a[i]							= to find using index i
a[i:j]							= to slice from i to j
broadcasting
	a[i:j]=some number          = to broadcast a number to the particular slice i to j  					[note : while broadcasting in slicing affect original variable]
	a[:]						= to choose all
b = a[i:j].copy					= to copy the array to another variable
arr[1,1] or arr[2][1]			= index a particular row or column or variables
arr[1:,1:] 						= slicing in multidimentional array
selection
	a>i or a<i 					= which remains value is boolean
	a[a>i] or a[a==i]			= which made as condition on that array
	
operation
	- we use arithmetic operation easier and also in single dimention and multidimentional array
	like a*a or a+a
	some of exception like 0/0 is nan(not an number)
						   0/1 is inf(infinity)

universal array function
np.sqrt(arr)					= to know the square root in both single and multi dimentional array
np.exp(arr)						= to know the exponential in both single and multidimentional array
np.max(arr)						= to know the maximum of number
np.min(arr)						= to know the minimum of number
np.log(arr)						= to know the log of number

end of section - 2

**************************************************************************************************************************************************************************************




PANDAS BASICS:
*************

what it means:
	- is a open source python library
	- which is used to load ,prepare, manipulate ,model the data in analysis
	- this is used for things to make data arrangement of dataframe and series 
	- dataframe which means a full frame of data or like table , series means a part of row and column
	
**************************************************************************************************************************************************************************************
	
SECTION - 1

Series = syntax: pd.Series(data = list name or [datas],index = list name or [datas])
we can add two series using sharing same columns

Dataframe = syntax: x = pd.DataFrame(data = randn(i,j),index = "A B C D E".split(),columns = "P Q R S T".split())
Accessing OR slicing data:
x[P] 							= to access a single column
x[['P','Q']] 					= to access a multiple column
x.P								= another way of access single column but not recommended
type(x[P])						= to know the type of data
x.loc['A']						= to  access the single row
x.loc[['A','B']]				= to  access the multiple rows
x.iloc[1]						= to  access the single rows using index
x.iloc[[1,2]]					= to  access the multiple rows using index

Conditional accessing OR slicing data:
x[x['P']>0]						= to access a column using conditional slicing
x[(x['P']>0)&(x['R']>0)]		= to access a multiple column using conditional slicing
x[x['P']>0]['R']				= to access the single value in row in conditional slicing column
x[x>0]							= to access the value satisfy the condition in dataframe[full table]
x>0								= to access the satisfied values in boolean value in dataframe[full table]

Adding and droping data in dataframe:
x['new column name'] = 
		x[P] +x[R]				= we can add like this to create a new column
		or
		x[values]				= we can add a column
x.drop('C',axis = 0)			= to delete a row temporarily,axis 0 is default
x.drop('R',axis = 1)			= to delete a column temporarily												[note : axis 1 means columns and 0 means rows] in pandas
x.drop('R',axis = 1,
			inplace = True)		= to delete a column permanently from the table ,default value of inplace is True
			
dataframe[x].apply[funtions]	= to apply some functions
	
Indexing:	to set index
list =["J K L M N"].split()
x['index'] = list
x.set_index('index'
			,inplace = True)	= to set index using adding a column or default column
x.reset_index()					= to reset index as in numberical order

Creation of hierachical index:
out = ['G1','G1','G1','G2','G2','G2'] --> main index name
ins = [1,2,3,1,2,3] --> subset index name
meth = zip(out,ins)
meth = pd.MultiIndex.from_tuples(meth)
l = pd.DataFrame(np.random.randn(6,2),index = meth,columns = ('A','B'))

l.loc['G1']						= to access particular hierarchy dataset
l.loc['G1'].loc[1]				= to access specific row in hierarchy dataset
l.index.names = ["group","num"] = to set index name for hierarchical datacolumns
l.xs('G1')						= to access the particular hierachical dataset [xs means cross sectional data]
l.xs(1,level ="num")			= to access a same value from different dataset using subset index name

end of section - 1

**************************************************************************************************************************************************************************************

SECTION - 2

Missing data in pandas
np.nan 							= for not an number [NaN]
lst.dropna()					= used for drop a not an number row and column
lst.dropna(axis = 0 | 1)		= used for drop NaN in column or row using axis
lst.dropna(thresh =2)			= used for drop NaN in condition using thresh [1 means atleast one number,2 means alteast two number
lst.fillna(value "some value")	= which is used to fill in the NaN position

GroupBy in pandas
syntax: x = pd.DataFrame(data)
		y = x.groupby("value use in common")
		y.mean() | y.max() | y.min() | y.std() | y.describe()
example:
lst1 = pd.DataFrame({"company":["google","fb","wp","google","fb","wp"],"person":["ashwanth","dilip","kishore","divya","bharathi","sathya"],"sales":[120,234,545,654,754,223]})
a = lst1.groupby("company")
a.describe()
	(or)
lst1.groupby("company").max() | min() | mean() | st() --> use directly

end of section - 2

**************************************************************************************************************************************************************************************

SECTION - 3

Concatenation and merging and joining
pd.concat([x,y,z],axis = 0 | 1)	= which is used to concate values in table or dataframe by its column index				[note: axis based on row means 0 as default,1 means column]
pd.merge(x,y
		,how='inner' | 'outer'
		,on='common key')		= which is used to merging values of both dataframes by inner | outer join				[outer join means just merge after one dataframe]
								  using common key of both the dataframe using 'on'										[inner join means take a common column as one]
pd.merge(x,y 
		,how='right' | 'left'																							[left means eliminate right portion]
		,on=['ckey1', 'ckey2']) = which is merging different dataframe by right | left join using two common keys		[right means eliminate left portion]
		
left.join(right | left, 
			how='outer' |inner)	= which is used join right to left means consider the column of left only
								  if how is outer means combine both ,inner means common								[this space mentioned as NaN]
								  
unique values function
x['column name'].unique()		= is used for mention unique value
x['column name'].nunique()		= is used for number of total unique value 
x['column name'].value_counts()	= is used for count no of times in unique value
x[(x['column name']>2) 
	& (x['column name']==0)]    = we can use conditions also

Functions operation
def square_root(x):
    return x*2
x['column name'].apply(times2)	= to use user defined function in dataframe in each values
x['colume name'].apply(len)		= for length of column
x['column name'].sum()			= to sum the values in column
del x['column name']			= to easily delete the value in series or dataframe permanently instead of inplace
x.columns						= to easily show columns
x.index							= to easily show index
x.sort_values(by='column name') = to show different value for unique value in prior 									[inplace=False by default]
x.isnull()						= to check null is present
x.head(i)						= to show the limited number of series/rows in table without show full dataset
x.info()						= to show the detail id ,value,null/not null value and datatype
x[['some','thing']].corr()		= to show the correlation of given values

x.pivot_table
	(values='main group'
	,index=['subset1','subset2']
	,columns=['some values'])	= to arrange the dataframe in hierachical or normal order to define
	
end of section - 3

**************************************************************************************************************************************************************************************

SECTON - 4

x = pd.read_csv('file name')	= to read a csv file 																	[CSV file must present within the folder where we working]
x.to_csv('example',index=False) = to eliminate default index while create it
pd.read_excel('file.xlsx'
		,sheet_name='Sheet1')	= to read a excel file we must mention the sheet number
															
														We download this module to work with html
															conda install lxml
															conda install html5lib
															conda install BeautifulSoup4
															
x = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')  = to read a html file 


for sql file
from sqlalchemy import create_engine
engine = create_engine('sqlite:///:memory:')
df.to_sql('data', engine)
sql_df = pd.read_sql('data',con=engine)
sql_df

end of section - 4

**************************************************************************************************************************************************************************************





MATPLOTLIB BASICS
*****************

What it means:
	- it used as a data visualisation tool.
	- which used to create plotting the data in different graphs.
	- but this is older version than seaborn library in data visualisation.
	- it may use to make simple graph to complex
	
**************************************************************************************************************************************************************************************

SECTION - 1

to show the grap or content in this library :
%matplotlib inline				 = to show the graph in jupyter	
plt.show()						 = to show in other IDE [plt means alias name of matplotlib in import section]

plt.plot(i,j)					 = to create a plot between the list of array i and j
plt.xlabel('write something..')	 = to label the plot x axis in horizontal line
plt.ylabel('write something..')	 = to label the plot y axis in vertical line
plt.title('write something..')	 = to label the title on above the graph

creating multiplot on same canvas
plt.subplot(x,y,z)																										[x means vertical length y means horizontal breadth]
plt.plot(i,j,'r-- or g*-')		 																						[i & j means array of list]
plt.subplot(x,y,z)																										[r & g mention color green and red and first - or *
																														mention points or dotted on axis and next - is line of code]
plt.plot(i,j,'r-- or g*-')		 = In these subplot used to create two sub plots nad the plots are mentioned in x and y arrays

object oriented method
In this method we can access manipulate the graph on limits and figure it out

fig = plt.figure()				 = to create empty canvas(which mention output of graph on space)
axes1 = fig.
	  add_axes([0.1,0.1,0.8,0.8])= to create axis for empty figure[left,bottom,width,height]
axes.plot(i,j,'b*-')	  		 = to create plot in axes at object oriented method
axes2 = fig.																											[which make main and inline axes graph inside another one]
	  add_axes([0.1,0.1,0.8,0.8])= Like this we create multiple axes in same figure canvas and plot each

subplot() in object oriented method
fig,axes = plt.subplot()		 = which is tuple unpacking means a pack of tuple separated as single integer after that plot it using axes.plot()
fig,axes = plt.subplot(nrows = 1																						[nrows to mention rows and ncols to mention the columns]
				ncols = 2)		 = which we plot the empty fig like this after plot the axes using axes.plot()
axes							 = to know the axes name in array

fig, ax = plt.subplots(2, 3)	 = for multiplot reading in tuple unpacking
fig.tight_layout()

we can use for loop also
for i in axes:
    ax.plot(x, y, 'b')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title('title')		 = to plot using for loop

fig								 = Display the figure object  
fig.tight_layout() or 
	plt.tight_layout() method    = which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content
fig = plt.figure(figsize=(8,4),
						dpi=100) = figsize is to width and height of figure in inches, dpi is dots-per-inch(pixels per inch (100{1000*1000} is good pixel))
fig, axes = plt.subplots
				(figsize=(12,3)) = to make figsize in subplots then plot the axes
fig.savefig("filename.png", 
						dpi=200) = to save creates chart or graph in any extension line pdf,png,jpeg.. 					[name the file and pixelate using dpi]

end of section - 1

**************************************************************************************************************************************************************************************

SECTION - 2

line,label,legend and color shapes
axes.set_title("title")			 = to set title in object oriented method
axes.set_xlabel('x')			 = to set x axis label in object oriented method
axes.set_ylabel('y') 			 = to set y axis label in object oriented method
axes.legend(loc = 1 or 2 or																								[loc means location 1 = upper right corner,2 = upper left]
			3 or 4)				 = which is used to mark the x axis and y axis values in map							[3 means lower left ,4 = lower right corner]
plt.scatter(x,y)				 = for scatter dot graph
plt.hist(data)					 = for vertical bar chart 																[data to organise in range of betweens]
plt.boxplot(data,vert=True,
			patch_artist=True);  = for boxplot chart from - to + vertically
plt.fill_between(data)			 = for shaded graph betweeen ranges
plt.step()						 = for step graph with range manipulation with attributes

axes.set_xticklabels([r'$\alpha$'= for label in x axis point name 
	,r'$\beta$', r'$\gamma$',	 = for special case	
	r'$\delta$', r'$\epsilon$'],
	fontsize=18)				 = for font size of point
ax.set_xticklabels([data as x])	 = for label in y axis point name

For padding between axis label and axis numbers																			[which is used to padding space inbetween label & axis no]				
ax.xaxis.labelpad = no
ax.yaxis.labelpad = no

for text annotation on the line of graph																				[which position on numbers and word written on the line]
ax.text(0.15, 0.2, r"$y=x^2$", fontsize=20, color="blue")
ax.text(0.65, 0.1, r"$y=x^3$", fontsize=20, color="green");

axes.plot(x, x+1, 
	color="blue", alpha=0.5,	 = to make color of line and alpha is for transparency
	linewidth=0.25or 0.50or 1.00,= to make the line width of axis	 
	linestyle='-' or ':' or '-.',= to make the line dotted or dashed or colons
	marker ='+'or'o'or's'or'1',  = to make the axis point into shape
	markersize =2 or 4 or 6 or 8,= to make the axis point shape size bigger or smaller
	markerfacecolor="red"or'b',  = to make the axis point in multicolor
	markeredgewidth=3 or 4, 	 = to make the edge of axis point width size
	markeredgecolor="g"or'red')	 = to make the edge of axis point in multicolor not the face 



some plot range example:
fig, axes = plt.subplots(1, 3, figsize=(12, 4))

axes[0].plot(x, x**2, x, x**3)
axes[0].set_title("default axes ranges")

axes[1].plot(x, x**2, x, x**3)
axes[1].axis('tight')
axes[1].set_title("tight axes")

axes[2].plot(x, x**2, x, x**3)
axes[2].set_ylim([0, 60])        = limit for axis range for y axis
axes[2].set_xlim([2, 5])		 = limit for axis range for x axis
axes[2].set_title("custom axes range");

end of section - 2

**************************************************************************************************************************************************************************************

SECTION - 3

[*********
		Practices: For 3D Graph

		fig = plt.figure(figsize=(14,6))

		# `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot
		ax = fig.add_subplot(1, 2, 1, projection='3d')

		p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

		# surface_plot with color grading and color bar
		ax = fig.add_subplot(1, 2, 2, projection='3d')
		p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, linewidth=0, antialiased=False)
		cb = fig.colorbar(p, shrink=0.5)
																											  *********]
																											  
end of section - 3

**************************************************************************************************************************************************************************************

ADDITIONAL

import matplotlib.pyplot as plt

plt.style.use('ggplot')			 
plt.style.use('dark_background')
plt.style.use('bmh')
plt.style.use('fivethirtyeight')= style sheets which is used to map a graph with different style types

inbuilt plots:

dataset['A'].hist()				= inbuilt plot in pandas
data.plot.area(alpha=0.4)		= to show area plot by wave area vertically
data.plot.bar(stacked=True)		= to show bar graph																			[stacked means bar in same line vertically]
data['A'].plot.hist(bins=50)	= for histogram by plot bins
data.plot.line(x=df1.index,y='B'= for line graph by using dataset
		,figsize=(12,3),lw=1)
data.plot.scatter(x='A',y='B',
		c='C',cmap='coolwarm')	= for scatter graph in multiple value in series
data.plot.scatter(x='A',y='B',
			s=df1['C']*200)		= for scatter graph by make difference in size
data.plot.box()					= for box plot
data.plot.hexbin(x='a',y='b',
	gridsize=25,cmap='Oranges'	= for hexagonal graph with color and grids
data['a'].plot.kde()			= for kde plot[density line] for uni variable
data.plot.density()				= for density similiar to kde for dataframe
data.plot.pie()					= for pie chart plot


**************************************************************************************************************************************************************************************






SEABORN BASICS
**************

what it means:
	- which is data visualization tool that made on top of matplotlib
	- it use as extendability of visualization and make dataframe directly on plot and charts which not by matplotlib
	- which as high level interface to make data more visibility
	
**************************************************************************************************************************************************************************************

SECTION - 1

import seaborn as sns				= to import seaborn																	  [normally support numerical but we achieve, only on series]
%matplotlib inline

distribution plots
tips = sns.load_dataset('tips')		= load_dataset use to load a dataset & tips is a default data seaborn
sns.distplot(tips['total_bill'])	= to create vertical barchart(histogram) from dataset tips and column total_bill which include kde layer as default
sns.distplot(tips['total_bill'],																						  [kde=kernal density estimator to make pdf(function)in line]
				kde=False,bins=30)	= to make kde to false and set bins 												  [pdf=probability density fn mentioned in percentage(yaxis)]
		[which bins are interval time on x axis, we can set it]
sns.jointplot(x='total_bill',		= used to make joint plots[scatter,regression,kde,hexagonal] between x series ond y series on dataset mention on data
     y='tip',data=tips,
	 kind='scatter')				= kind of chart or plot
sns.pairplot(tips,hue='sex',		= pair plot to make different plot on requuired dataset on numerical values
	 palette='coolwarm')			= hue means to depend on which series,we can use hue & palette refers about type of color visible on chart or plot
sns.rugplot(tips['total_bill'])		= rug plot for bar graph in plot using dataset
sns.kdeplot(tips['total_bill'])		= kde plot used to make plot in line on percentage

end of section - 1

**************************************************************************************************************************************************************************************

SECTION - 2

categorical plots
sns.barplot(x='sex',y='total_bill',
	data=tips,estimator=np.std)		= make a bar plot by giving x and y series ,dataset and estimator means aggregate fn default as mean[avg ,standard deviation]
sns.countplot(x='sex',data=tips)	= make a bar plot, in this y automatically calculates x only given and the dataset
sns.boxplot(x="day", y="total_bill",
	data=tips,palette='rainbow')	= this used for outlayer of content by showing box with edges and some oulayers by giving x and y series for axis,dataset and color refer palette
sns.boxplot(data=tips,hue="smoker"
	palette='rainbow',orient='h') 	= this orient used for direction of plots, h means horizontal, hue is to make a plot corresponding to 'smoker' series that we mentioned
sns.violinplot(x="day", 			= this violen plot is shapes like violin to make distribution horizontally in vertical direction
	y="total_bill", data=tips,
	hue='sex',split=True,			= in this split we used to make two value in single series in single plot of violin graph
	palette='Set1')
sns.stripplot(x="day", 				= this strip plot used for scatter plot for single categorical values
	y="total_bill", data=tips,		
	jitter=True,hue='sex',			= jitter to get smooten width default as false
	palette='Set1',split=True)		= split for two values shone on single plot of violin like graph
sns.swarmplot(x="day",				= swarm plot makes clear scatter plot without overlap, hue for corresponding series
	y="total_bill",hue='sex',																							    [***comparatively both violin and swarm plot or same
	data=tips, palette="Set1", 																								  which violin plot is violin like structure inline
	split=True)																												   but swarn also violin like strucure but dotted***]	
sns.catplot(x='sex',y='total_bill',
	data=tips,kind='bar')			= this is cat plot is common plot has function kind to make different plot
	
end of section - 2

**************************************************************************************************************************************************************************************

SECTION - 3

matrix plot
sns.heatmap(tips.corr())			= to form a color square plot for correlation between three series and we czn form data and directly put it into heatmap
sns.heatmap(tips.corr(),
	cmap='coolwarm',annot=True		= cmap for color of map & annot for values mention on map 
	,linecolor='white',linewidths=1)= linecolor for between line of each boxes for spaces and linewidth for width of line to separate

grid plots																													[Map to upper,lower, and diagonal]
g = sns.PairGrid(iris)				= pair grid used to create multiple grid for values present in datasets
g.map_diag(plt.hist)				= mapping the pair grid using matplotlib of charts or graphs for diagonal
g.map_upper(plt.scatter)			= mapping the pair grid using matplotlib of charts or graphs for upper triangle
g.map_lower(sns.kdeplot)			= mapping the pair grid using matplotlib of charts or graphs for lower triangle
sns.pairplot(iris,hue='species',
	palette='rainbow')				= pair plot is simplest version of pair grid, we can use hue and palette
	
g = sns.FacetGrid(tips, col="time",
			row="smoker",hue='sex')	= to create a general grid for plotting
g = g.map(plt.scatter, "total_bill",																						[Notice how the arguments come after plt.scatter call]
			"tip").add_legend()		= to map grid for scatter using two dataset 

g = sns.JointGrid(x="total_bill", 
			y="tip", data=tips)		= to create joint plot main and sub plot by mention dataset and series
g = g.plot(sns.regplot,sns.distplot)= after create and add the main plot and subplot

end of section - 3

**************************************************************************************************************************************************************************************

SECTION - 4

sns.lmplot(x='total_bill',			= to create regression line in plot , we use lmplot, add series and dataset  
	y='tip',data=tips,hue='sex',
	palette='coolwarm')

using markers
sns.lmplot(x='total_bill',y='tip',
	data=tips,hue='sex',
	palette='coolwarm',
    markers=['o','v'],				= to achieve markers on scatter plot with shape use markers = []
	scatter_kws={'s':100})			= and size of markers mention in dictionary by usinng scatter_kws = {s(size) : 100}
sns.lmplot(x="total_bill", y="tip",
	row="sex", col="time",data=tips)= we can use grid by giving values of multipe series and dataset 						[we can use individual values to grid plots]
sns.lmplot(x='total_bill',y='tip',
	data=tips,col='day',hue='sex',
	palette='coolwarm',aspect=0.6,	= we can create size of grid by using aspect and height
	height=8)
          
style and color
sns.set_style('white')				= to set style is present before we plot it has types like white grid, dark grid, dark, white, ticks
sns.countplot(x='sex',data=tips)
sns.despine()						= to remove lines upper and right side present after plot figure
sns.despine(left=True)				= which we mention to remove left side also
plt.figure(figsize=(12,3))			= we can increase size of figure by matplotlib
sns.countplot(x='sex',data=tips)
sns.lmplot(x='total_bill',y='tip',	
	size=2,aspect=4,data=tips)		= we also have size and aspect inbuilt fuction in grid only, we can access through it
sns.set_context('poster',			= to set context font size have some type like poster
	font_scale=4)					= font scale to increase size
sns.countplot(x='sex',data=tips)	

end of section - 4

**************************************************************************************************************************************************************************************






PLOTLY AND CUFFLINKS BASICS
***************************

what it means:
	- which is used to make interactive web interactive graphing library
	- some of inbuilt tools are shown on plotly in graph like zoom, marking, hovering...
	- and cufflinks helps to bind the plotly with the dataframe of pandas to make interactive

**************************************************************************************************************************************************************************************

SECTION

Using Cufflinks and iplot()			= graphs: scatter,bar,boxx,spread,ratio,heatmap,surface(3d),histogram,bubble
	
importing
from plotly import __version__
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf

print(__version__)					= to know version which should be greater 2
init_notebook_mode(connected=True)	= For Notebooks links
cf.go_offline()						= for offline use
data.iplot(kind='scatter',x='A',	= by using iplot to plot kind of map or chart,graph using kind to select graph after dataset
	y='B',mode='markers',size=10)
data.iplot(kind='bar',x='Category',	= to plot bar graph
					y='Values')
data.iplot(kind='box')				= for box plot
data.iplot(kind='surface',			= for 3D graph in color
			colorscale='rdylbu')																								[data is dataset or dataframe]
data[['A','B']].iplot(kind='spread')= to spread plot
data['A'].iplot(kind='hist',bins=25)= to plot histogram
df.iplot(kind='bubble',x='A',y='B'	= to plot bubble graph which is like scatter in biger size
					,size='C')
df.scatter_matrix()					= which is like a pair plot by creating multiple plot in single canvas in scatter plot and diagonal matrix

end of section

**************************************************************************************************************************************************************************************